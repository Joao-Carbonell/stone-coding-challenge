from flask import request, jsonify, make_response
from flask.views import MethodView
from flask_smorest import Blueprint

from app.controllers.analytics_controller import AnalyticsController
from app.controllers.attendance_controller import AttendanceController
from app.schemas.attendance_schema import AttendanceSchema

attendance_blueprint = Blueprint('api', 'api', url_prefix="/api",
                                 description="API endpoints" )

# @TODO: Add Schema for arguments and responses for all requests
@attendance_blueprint.route("/")
class AttendanceCollection(MethodView):
    """
    Handles attendance collection requests.

    This class represents a view for managing attendance collection. It is designed
    to handle various HTTP methods routed to the specified endpoint via Flask's
    MethodView, with primary emphasis on returning a JSON response using the GET
    request.

    :ivar decorators: A list of method decorators (Flask routing).
    :type decorators: list
    """
    @attendance_blueprint.response(200)
    def get(self):
        """
        Handles GET request to the endpoint

        :return: A JSON response with a message
        """
        return {'message': 'Attendance API'}

@attendance_blueprint.route('/attendances', methods=['POST'])
def create_attendance():
    """
    Handles the creation of a new attendance record. This function acts as the entry point
    for handling attendance creation requests within the application. It processes the
    incoming HTTP POST request containing attendance data in JSON format and delegates
    the handling to the `AttendanceController.create_attendance` method.

    :raises KeyError: Raised when required fields are missing in the request payload.
    :raises ValueError: Raised when provided data is invalid or its processing fails.
    :param data: The JSON payload containing attendance information.
    :type data: dict
    :return: A response object containing the result of attendance creation, either a success message
             or an error response.
    :rtype: flask.Response
    """
    return AttendanceController.create_attendance(request.json)

@attendance_blueprint.route('/attendances/<int:id>', methods=['PUT'])
def update_attendance(id):
    """
    Updates the attendance record specified by the given ID. This operation
    invokes the update functionality within the AttendanceController to
    update the attendance data based on the JSON payload received in the
    request.

    :param id: Unique identifier of the attendance record to be updated
    :type id: int
    :return: The response generated by the AttendanceController's
        update_attendance method, typically conveying the result of the
        update operation.
    """
    return AttendanceController.update_attendance(request.json, id)

@attendance_blueprint.route('/attendances/<int:id>', methods=['GET'])
def retrieve_attendance(id):
    """
    Handles the HTTP GET request to retrieve attendance details for a given
    attendance ID. This function routes requests via the AttendanceController
    to fetch the specified attendance record.

    :param id: The unique identifier of the attendance to retrieve
    :type id: int
    :return: A response object containing the attendance details or an error
        message if the record is not found
    :rtype: flask.Response
    """
    return AttendanceController.retrieve_attendance(id)

@attendance_blueprint.route('/attendances/', methods=['GET'])
def get_attendances():
    """
    Retrieves a list of all attendances.

    This endpoint handles GET requests to fetch all attendance records. It
    communicates with the AttendanceController to retrieve the data and
    returns the result back to the requester.

    :returns: JSON representation of all attendance records.
    :rtype: flask.Response
    """
    return AttendanceController.get_all_attendances(request)

@attendance_blueprint.route('/analytics/productivity_by_period/', methods=['GET'])
def get_productivity_by_period():
    """
    Handles the HTTP GET request to retrieve productivity analytics for a specific
    time period. This endpoint is designed to return insights on productivity metrics
    calculated over a given timeframe, as provided by the
    AnalyticsController's method.

    :returns: The productivity analytics information for the requested time period
        as provided by the AnalyticsController in an appropriate response format.
    :rtype: flask.Response
    """
    return AnalyticsController.get_productivity_by_period()

@attendance_blueprint.route('/analytics/productivity_by_period_with_angel/', methods=['GET'])
def get_productivity_by_period_with_angel():
    """
    Handles the HTTP GET request for retrieving productivity analytics by specified
    time periods with associated angel data.

    This endpoint fetches and returns productivity analytics in association with
    an "angel" entity. The specific functionality for data processing is delegated
    to the `AnalyticsController.get_productivity_by_period_with_angel()` method.

    :returns: The response from `AnalyticsController.get_productivity_by_period_with_angel()` method.
    """
    return AnalyticsController.get_productivity_by_period_with_angel()

@attendance_blueprint.route('/analytics/productivity_by_angel/', methods=['GET'])
def get_productivity_by_angel():

    return AnalyticsController.get_productivity_by_angel()

@attendance_blueprint.route('/analytics/productivity_by_logistics_pole_and_period/', methods=['GET'])
def get_productivity_by_logistics_pole_and_period():
    """
    Retrieves productivity data filtered by logistics pole and period.

    This function is part of the attendance blueprint and is responsible for
    fetching productivity-related analytics within specific logistical poles and
    periods, based on the requested parameters. It delegates the functionality
    to the AnalyticsController.

    :raises HTTPException: If the request fails or the query parameters are
        invalid.
    :return: Productivity data filtered by logistics pole and period.
    :rtype: Response
    """
    return AnalyticsController.get_productivity_by_logistics_pole_and_period()

